paths:

  /api/products:  
    get:
      summary: Returns all the products available in the DB
      tags:
        - Products
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: 'ERROR'
          content:
            application/json:
              schema:
                type: object  
                properties:
                  message:
                    type: string
                example:
                  message: "Error"

    post:
      summary: Create a new product
      tags:
        - Products
      requestBody:
        requiered: true
        content:
          application/json:
            schema: 
              $ref: "#/components/requestBodies/create"  
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: 'ERROR'
          content:
            application/json:
              schema:
                type: object  
                properties:
                  message:
                    type: string
                example:
                  message: "Error"


  /api/products/{id}:
    get:
      summary: Returns the product that matches the id parameter
      tags:
        - Products
      parameters:
        - name: id
          in: path
          required: true
      responses:
        "200":
          description: "OK"
          content:
            aplication/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Products"  
        "500":
          description: 'ERROR'
          content:
            application/json:
              schema:
                type: object  
                properties:
                  message:
                    type: string
                example:
                  message: "Error"

    put:
      summary: Update product that matches the id parameter, according to the body
      tags:
        - Products
      parameters:
        - name: id
          in: path
          requiered: true
      requestBody:
        requiered: true
        content:
          application/json:
            schema: 
              $ref: "#/components/requestBodies/update"
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: 'ERROR'
          content:
            application/json:
              schema:
                type: object  
                properties:
                  message:
                    type: string
                example:
                  message: "Error"             

    delete:
      summary: Delete the product that matches the id parameter
      tags: 
        - Products
      parameters:
        - name: id
          in: path
          required: true
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: 'ERROR'
          content:
            application/json:
              schema:
                type: object  
                properties:
                  message:
                    type: string
                example:
                  message: "Error"

  /api/productsviews:
    get:
      summary: Renders a template with the list of available products
      tags: 
        - Products
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: 'ERROR'
          content:
            application/json:
              schema:
                type: object  
                properties:
                  message:
                    type: string
                example:
                  message: "Error"

  /api/mockingproducts:
    get:
      summary: Generates an array of 20 non existent products in the database
      tags:
        - Products
      responses:
        "200":
          description: 'OK'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Products'
        "500":
          description: 'ERROR'
          content:
            application/json:
              schema:
                type: object  
                properties:
                  message:
                    type: string
                example:
                  message: "Error"
      

components: 
  schemas:
    Products:
      type: object
      properties:
        title:
          type: string
        _id:
          type: object
          description: Mongoose ObjectID
        description: 
          type: string
        code: 
          type: number
        price: 
          type: number
        status:
          type: boolean
        stock: 
          type: number
        category: 
          type: string
        thumbnail:
          type: string
        owner: 
          type: string

      example:
        title: Notebook Asus
        _id: 638b8c323f3a4b3be6dc397e
        description: Notebook Asus Ryzen5 16gb 1TB SSD
        code: 5059
        price: 1650
        status: true
        stock: 9
        category: Notebook
        thumbnail: notebook-asus.jpg
        owner: admin

  requestBodies:
    create:
      type: object
      properties:
        title:
          type: string
        description: 
          type: string
        code: 
          type: number
        price: 
          type: number
        status:
          type: boolean
        stock: 
          type: number
        category: 
          type: string
        thumbnail:
          type: string
        owner: 
          type: string

    update:
      type: object
      properties:
        title:
          type: string
        description: 
          type: string
        code: 
          type: number
        price: 
          type: number
        status:
          type: boolean
        stock: 
          type: number
        category: 
          type: string
        thumbnail:
          type: string
        owner: 
          type: string                     